// Code generated by mockery v2.46.0. DO NOT EDIT.

package data

import mock "github.com/stretchr/testify/mock"

// MockFileRepository is an autogenerated mock type for the FileRepository type
type MockFileRepository struct {
	mock.Mock
}

type MockFileRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileRepository) EXPECT() *MockFileRepository_Expecter {
	return &MockFileRepository_Expecter{mock: &_m.Mock}
}

// GetFile provides a mock function with given fields: objectKey
func (_m *MockFileRepository) GetFile(objectKey string) ([]byte, error) {
	ret := _m.Called(objectKey)

	if len(ret) == 0 {
		panic("no return value specified for GetFile")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(objectKey)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(objectKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(objectKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileRepository_GetFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFile'
type MockFileRepository_GetFile_Call struct {
	*mock.Call
}

// GetFile is a helper method to define mock.On call
//   - objectKey string
func (_e *MockFileRepository_Expecter) GetFile(objectKey interface{}) *MockFileRepository_GetFile_Call {
	return &MockFileRepository_GetFile_Call{Call: _e.mock.On("GetFile", objectKey)}
}

func (_c *MockFileRepository_GetFile_Call) Run(run func(objectKey string)) *MockFileRepository_GetFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFileRepository_GetFile_Call) Return(_a0 []byte, _a1 error) *MockFileRepository_GetFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileRepository_GetFile_Call) RunAndReturn(run func(string) ([]byte, error)) *MockFileRepository_GetFile_Call {
	_c.Call.Return(run)
	return _c
}

// ListFiles provides a mock function with given fields: objectKey
func (_m *MockFileRepository) ListFiles(objectKey string) ([]string, error) {
	ret := _m.Called(objectKey)

	if len(ret) == 0 {
		panic("no return value specified for ListFiles")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(objectKey)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(objectKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(objectKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileRepository_ListFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFiles'
type MockFileRepository_ListFiles_Call struct {
	*mock.Call
}

// ListFiles is a helper method to define mock.On call
//   - objectKey string
func (_e *MockFileRepository_Expecter) ListFiles(objectKey interface{}) *MockFileRepository_ListFiles_Call {
	return &MockFileRepository_ListFiles_Call{Call: _e.mock.On("ListFiles", objectKey)}
}

func (_c *MockFileRepository_ListFiles_Call) Run(run func(objectKey string)) *MockFileRepository_ListFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFileRepository_ListFiles_Call) Return(_a0 []string, _a1 error) *MockFileRepository_ListFiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileRepository_ListFiles_Call) RunAndReturn(run func(string) ([]string, error)) *MockFileRepository_ListFiles_Call {
	_c.Call.Return(run)
	return _c
}

// SaveFile provides a mock function with given fields: filename, _a1
func (_m *MockFileRepository) SaveFile(filename string, _a1 []byte) error {
	ret := _m.Called(filename, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SaveFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(filename, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFileRepository_SaveFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveFile'
type MockFileRepository_SaveFile_Call struct {
	*mock.Call
}

// SaveFile is a helper method to define mock.On call
//   - filename string
//   - _a1 []byte
func (_e *MockFileRepository_Expecter) SaveFile(filename interface{}, _a1 interface{}) *MockFileRepository_SaveFile_Call {
	return &MockFileRepository_SaveFile_Call{Call: _e.mock.On("SaveFile", filename, _a1)}
}

func (_c *MockFileRepository_SaveFile_Call) Run(run func(filename string, _a1 []byte)) *MockFileRepository_SaveFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *MockFileRepository_SaveFile_Call) Return(_a0 error) *MockFileRepository_SaveFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFileRepository_SaveFile_Call) RunAndReturn(run func(string, []byte) error) *MockFileRepository_SaveFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFileRepository creates a new instance of MockFileRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileRepository {
	mock := &MockFileRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
