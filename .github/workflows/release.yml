name: Release

on:
  push:
    branches:
      - master
      - release/*

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.APP_CLIENT_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Auth GitHub CLI
        run: echo "GITHUB_TOKEN=${{steps.app-token.outputs.token}}" >> $GITHUB_ENV

      - name: Get version
        run: echo "VERSION=$(make version)" >> $GITHUB_ENV

      - name: Authorize in Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}:${{ env.VERSION }}
            ${{ github.ref == 'refs/heads/master' && format('{0}/{1}:latest', secrets.DOCKER_HUB_USERNAME, vars.DOCKER_IMAGE_NAME) || '' }}

      - name: Draft release
        uses: release-drafter/release-drafter@v6
        with:
          name: ${{ github.event.repository.name }} v${{ env.VERSION }}
          tag: ${{ env.VERSION }}
          header: |
            [> DockerHub](https://hub.docker.com/r/${{ secrets.DOCKER_HUB_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}/tags?name=${{ env.VERSION }})
            
            ```bash
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}:${{ env.VERSION }}
            ```  

      - name: Publish Draft
        run: |
          existing_release=$(gh release view "${{ env.VERSION }}" --json id --jq '.id // empty')
          
          if [[ -n "$existing_release" && "$existing_release" != "release not found" ]]; then
            echo "Deleting existing release for version ${{ env.VERSION }}"
            gh release delete "${{ env.VERSION }}" --yes --repo ${{ github.repository }}
          fi
          
          echo "Publishing new release for version ${{ env.VERSION }}"
          gh release edit "${{ env.VERSION }}" --draft=false --repo ${{ github.repository }}